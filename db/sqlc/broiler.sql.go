// Code generated by sqlc. DO NOT EDIT.
// source: broiler.sql

package db

import (
	"context"
)

const createBroiler = `-- name: CreateBroiler :one
INSERT INTO broiler (
    title
) VALUES (
          $1
) RETURNING id, title, created_at
`

func (q *Queries) CreateBroiler(ctx context.Context, title string) (Broiler, error) {
	row := q.queryRow(ctx, q.createBroilerStmt, createBroiler, title)
	var i Broiler
	err := row.Scan(&i.ID, &i.Title, &i.CreatedAt)
	return i, err
}

const deleteBroiler = `-- name: DeleteBroiler :exec
DELETE FROM broiler
WHERE id = $1
`

func (q *Queries) DeleteBroiler(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteBroilerStmt, deleteBroiler, id)
	return err
}

const getBroiler = `-- name: GetBroiler :one
SELECT id, title, created_at FROM broiler
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBroiler(ctx context.Context, id int32) (Broiler, error) {
	row := q.queryRow(ctx, q.getBroilerStmt, getBroiler, id)
	var i Broiler
	err := row.Scan(&i.ID, &i.Title, &i.CreatedAt)
	return i, err
}

const listBroiler = `-- name: ListBroiler :many
SELECT id, title, created_at FROM broiler
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBroilerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBroiler(ctx context.Context, arg ListBroilerParams) ([]Broiler, error) {
	rows, err := q.query(ctx, q.listBroilerStmt, listBroiler, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Broiler
	for rows.Next() {
		var i Broiler
		if err := rows.Scan(&i.ID, &i.Title, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
