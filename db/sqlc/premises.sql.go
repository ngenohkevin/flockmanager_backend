// Code generated by sqlc. DO NOT EDIT.
// source: premises.sql

package db

import (
	"context"
	"database/sql"
)

const createPremises = `-- name: CreatePremises :one
INSERT INTO premises (
    farm,
    house
) VALUES (
             $1, $2
         ) RETURNING premises_id, created_at, farm, house, kuroiler_id, rainbowrooster_id, broiler_id, layers_id
`

type CreatePremisesParams struct {
	Farm  sql.NullString `json:"farm"`
	House sql.NullString `json:"house"`
}

func (q *Queries) CreatePremises(ctx context.Context, arg CreatePremisesParams) (Premise, error) {
	row := q.queryRow(ctx, q.createPremisesStmt, createPremises, arg.Farm, arg.House)
	var i Premise
	err := row.Scan(
		&i.PremisesID,
		&i.CreatedAt,
		&i.Farm,
		&i.House,
		&i.KuroilerID,
		&i.RainbowroosterID,
		&i.BroilerID,
		&i.LayersID,
	)
	return i, err
}

const getPremises = `-- name: GetPremises :one
SELECT premises_id, created_at, farm, house, kuroiler_id, rainbowrooster_id, broiler_id, layers_id FROM premises
WHERE premises_id = $1 LIMIT 1
`

func (q *Queries) GetPremises(ctx context.Context, premisesID sql.NullInt64) (Premise, error) {
	row := q.queryRow(ctx, q.getPremisesStmt, getPremises, premisesID)
	var i Premise
	err := row.Scan(
		&i.PremisesID,
		&i.CreatedAt,
		&i.Farm,
		&i.House,
		&i.KuroilerID,
		&i.RainbowroosterID,
		&i.BroilerID,
		&i.LayersID,
	)
	return i, err
}

const listPremises = `-- name: ListPremises :many
SELECT premises_id, created_at, farm, house, kuroiler_id, rainbowrooster_id, broiler_id, layers_id FROM premises
ORDER BY premises_id
LIMIT $1
OFFSET $2
`

type ListPremisesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPremises(ctx context.Context, arg ListPremisesParams) ([]Premise, error) {
	rows, err := q.query(ctx, q.listPremisesStmt, listPremises, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Premise
	for rows.Next() {
		var i Premise
		if err := rows.Scan(
			&i.PremisesID,
			&i.CreatedAt,
			&i.Farm,
			&i.House,
			&i.KuroilerID,
			&i.RainbowroosterID,
			&i.BroilerID,
			&i.LayersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
