// Code generated by sqlc. DO NOT EDIT.
// source: layers.sql

package db

import (
	"context"
)

const createLayers = `-- name: CreateLayers :one
INSERT INTO layers (
    title
) VALUES (
          $1
) RETURNING id, title, created_at
`

func (q *Queries) CreateLayers(ctx context.Context, title string) (Layer, error) {
	row := q.queryRow(ctx, q.createLayersStmt, createLayers, title)
	var i Layer
	err := row.Scan(&i.ID, &i.Title, &i.CreatedAt)
	return i, err
}

const deleteLayers = `-- name: DeleteLayers :exec
DELETE FROM layers
WHERE id = $1
`

func (q *Queries) DeleteLayers(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteLayersStmt, deleteLayers, id)
	return err
}

const getLayers = `-- name: GetLayers :one
SELECT id, title, created_at FROM layers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLayers(ctx context.Context, id int32) (Layer, error) {
	row := q.queryRow(ctx, q.getLayersStmt, getLayers, id)
	var i Layer
	err := row.Scan(&i.ID, &i.Title, &i.CreatedAt)
	return i, err
}

const listLayers = `-- name: ListLayers :many
SELECT id, title, created_at FROM layers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListLayersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLayers(ctx context.Context, arg ListLayersParams) ([]Layer, error) {
	rows, err := q.query(ctx, q.listLayersStmt, listLayers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Layer
	for rows.Next() {
		var i Layer
		if err := rows.Scan(&i.ID, &i.Title, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
